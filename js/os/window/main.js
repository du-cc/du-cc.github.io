// Module: Window management (main)
// TODO:
// - Implement with other modules (idk)
// - Add more features???????(idk)<-- Auto-generated by TODO-GeneratorTM (copilot)

import * as layer from "./layer.js";
import * as drag from "./drag.js";
import * as resize from "./resize.js";

// Function: Create window
// Arguments:
//   Name    |  Type       |  Description         |  Example
// --------------------------------------------------------------------------------------------
// - type    |  [string]   |  Window type         |  [window, dialog]
// - icon    |  [HTML]     |  Window icon         |  [<img>, <i>]
// - title   |  [string]   |  Window title        |  [string]
// - content |  [dict]     |  Window content      |  {type: [HTML/URL], content: [HTML/URL]}
// - args    |  [dict]     |  Optional arguments  |  Below:
// --------------------------------------------------------------------------------------------

// Optional arguments:
// x: [string],            | x pos
// y: [string],            | y pos
// TODO: sx: [string],           | x size
// TODO: sy: [string],           | y size
// draggable: [bool],      | draggable?
// pinToTop: [bool],       | overlay the window on top
// TODO: ignoreDefault: [bool],  | ignore default topbar (no topbar if true, remember to attach topbar in content)
// actions: [dict]         | actions [close, minimize, (custom)]

// Settings:
const actionIcons = {
  close: '<i class="fa-regular fa-xmark fa-fw"></i>',
  minimize: '<i class="fa-regular fa-minus fa-fw"></i>',
};

// Data:
var data = {};

// TODO:
// - Implement id with app id or window id
// - Add custom actions
// - Ignore default topbar

export async function create(args) {
  console.log(args);
  const acceptedValues = {
    type: ["window", "dialog"],
    content: ["html", "url"],
  };

  const defaultArgs = {
    type: "window",
    icon: "",
    title: "Window",
    content: { type: "html", content: "" },
    x: "center",
    y: "center",
    sx: "",
    sy: "",
    minsx: 200,
    minsy: 200,
    draggable: true,
    resizeable: true,
    pinToTop: false,
    // ignoreDefault: false,
    actions: ["close"],
  };

  // default values
  args = { ...defaultArgs, ...args };

  // Argument fallbacks
  if (!acceptedValues["type"].includes(args["type"])) {
    console.error("Invalid window type");
    return { ok: false, error: "Invalid window type" };
  }

  if (!acceptedValues["content"].includes(args["content"]["type"])) {
    console.error("Invalid content type");
    return { ok: false, error: "Invalid content type" };
  }

  // Create window
  const window = document.createElement("div");
  window.classList.add("os_window");
  window.setAttributeNS(null, "elementType", args["type"]);

  // Attributes
  if (!args["draggable"]) window.setAttribute("undraggable", "");
  if (!args["resizeable"]) window.setAttribute("unresizeable", "");
  window.setAttribute(
    "id",
    `os_window_${Math.random().toString(36).substring(7)}`
  );

  // Top bar creation
  if (args["type"] === "window") {
    // Top bar (parent)
    const top = document.createElement("div");
    top.classList.add("top");
    top.id = "top";
    window.appendChild(top);

    // Top bar (Left)
    const left = document.createElement("div");
    left.classList.add("left");
    left.innerHTML = `${args["icon"]}<span>${args["title"]}</span>`;
    if (!args["actions"] || args["actions"].length === 0) {
      left.style.borderRadius = "10px 10px 0 0";
    }
    top.appendChild(left);

    // Top bar (Right)
    const right = document.createElement("div");
    right.classList.add("right");
    top.appendChild(right);

    // Actions (Right)
    // sorry if unefficient, i need these to be in order
    if (args["actions"].includes("minimize")) {
      const minimize = document.createElement("div");
      minimize.classList.add("action");
      minimize.classList.add("minimize");
      minimize.innerHTML = actionIcons["minimize"];
      right.appendChild(minimize);
    }

    if (args["actions"].includes("close")) {
      const close = document.createElement("div");
      close.classList.add("action");
      close.classList.add("close");
      close.innerHTML = actionIcons["close"];
      right.appendChild(close);
    }
  }

  // Content
  const contentDiv = document.createElement("div");
  contentDiv.classList.add("content");
  contentDiv.id = "content";
  if (args["ignoreDefault"] === true || args["type"] === "dialog")
    contentDiv.style.borderRadius = "10px";
  window.appendChild(contentDiv);

  // Content (URL)
  if (args["content"]["type"] === "url") {
    const iframe = document.createElement("iframe");
    iframe.src = args["content"]["content"];
    iframe.setAttribute("frameborder", "0");
    iframe.setAttribute("x-frame-options", "cross-origin");
    contentDiv.appendChild(iframe);
  }
  // Content (HTML)
  if (args["content"]["type"] === "html") {
    contentDiv.innerHTML = args["content"]["content"];
  }

  // Additional arguments

  // Position
  if (args["x"] === "center") {
    gsap.set(window, { x: "-50%", left: "50%" });
  } else {
    gsap.set(window, { x: args["x"] });
  }

  if (args["y"] === "center") {
    gsap.set(window, { y: "-50%", top: "50%" });
  } else {
    gsap.set(window, { y: args["y"] });
  }

  // Size
  if (args["sx"]) {
    window.style.width = parseInt(args["sx"]) + "px";
  }
  if (args["sy"]) {
    window.style.height = parseInt(args["sy"]) + "px";
  }

  // Min size
  window.style.minWidth = parseInt(args["minsx"]) + "px";
  window.style.minHeight = parseInt(args["minsy"]) + "px";

  // Pin to top
  if (args["pinToTop"]) {
    layer.pinToTop(window);
  }

  // Append to body + animations
  gsap.set(window, {
    scale: 0.95,
    opacity: 0,
    y: "+=10",
    duration: 0.1,
  });
  document.getElementById("body").appendChild(window);
  gsap.to(window, {
    scale: 1,
    opacity: 1,
    y: "-=10",
    duration: 0.1,
  });

  data[window.id] = {
    element: window,
    type: args["type"],
    x: args["x"],
    y: args["y"],
    sx: args["sx"],
    sy: args["sy"],
    minsx: args["minsx"],
    minsy: args["minsy"],
    draggable: args["draggable"],
    headless: args["type"] === "dialog",
    state: "open",
  };

  console.log("k", data[window.id]);

  // Draggable
  if (args["draggable"] === true && args["type"] === "window") {
    drag.setDraggable(window);
  }

  // Resizeable
  if (args["resizeable"] === true && args["type"] === "window") {
    resize.setResizeable(window);
  }

  // Event listeners
  if (args["type"] === "window") {
    args["actions"].forEach((action) => {
      window.querySelector(`.${action}`).addEventListener("click", () => {
        if (action === "close") {
          close(window);
        }
        if (action === "minimize") {
          if (data[window.id].state === "open") {
            minimize(window);
          } else {
            restore(window);
          }
        }
      });
    });
  }

  window.addEventListener("click", () => {
    layer.bringToFront(window);
  });

  return { ok: true, id: window.id, window: window };
}

// TODO:
// - Add animations

export function close(window) {
  gsap.to(window, {
    scale: 0.95,
    opacity: 0,
    y: "+=10",
    duration: 0.1,
    onComplete: () => {
      window.remove();
    },
  });
  // window.remove();
  return { ok: true };
}

// TODO:
// - Add animations
// - Integrate with taskbar module

export function minimize(window) {
  data[window.id].state = "minimized";
  gsap.to(window.querySelector("#content"), {
    height: 0,
    duration: 0.1,
    onComplete: () => {
      window.querySelector("#content").style.display = "none";
    },
  });
}

export function restore(window) {
  data[window.id].state = "open";
  window.querySelector("#content").style.display = "block";
  gsap.to(window.querySelector("#content"), {
    height: data[window.id].sy,
    duration: 0.1,
  });
}

// export function colorize(window, color) {
  // Deprecated (pre applies transparency)
  // Thanks to https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
  //   function hexToRgb(hex) {
  //     // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  //     var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  //     hex = hex.replace(shorthandRegex, function(m, r, g, b) {
  //       return r + r + g + g + b + b;
  //     });

  //     var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  //     return result
  //       ? {
  //           r: parseInt(result[1], 16),
  //           g: parseInt(result[2], 16),
  //           b: parseInt(result[3], 16),
  //         }
  //       : null;
  //   }
  //   console.log(color);
  //   color = hexToRgb(color);
  //   console.log(color);
  // //color(srgb 1 1 1 / 0.76)
  //   const bg = {
  //     left: `color(srgb ${color.r/255} ${color.g/255} ${color.b/255} / 0.666667)`,
  //     right: `color(srgb ${color.r/255} ${color.g/255} ${color.b/255} / 0.666667)`,
  //     content: `color(srgb ${color.r/255} ${color.g/255} ${color.b/255} / 0.769231)`,
  //   };

  // const bg = {
  //   left: color,
  //   right: color,
  //   content: color,
  // }

  // if (window === "all") {
  //   window = document.querySelectorAll(".os_window");

  //   window.forEach((w) => {
  //     const elements = {
  //       left: w.querySelector(".left"),
  //       right: w.querySelector(".right"),
  //       content: w.querySelector(".content"),
  //     };

  //     gsap.to(elements.left, {
  //       backgroundColor: bg.left,
  //     });

  //     gsap.to(elements.right, {
  //       backgroundColor: bg.right,
  //     });

  //     gsap.to(elements.content, {
  //       backgroundColor: bg.content,
  //     });
  //   });

  //   return { ok: true };
  // }
  // const elements = {
  //   left: window.querySelector(".left"),
  //   right: window.querySelector(".right"),
  //   content: window.querySelector(".content"),
  // };

  // gsap.to(elements.left, {
  //   backgroundColor: bg.left,
  // });

  // gsap.to(elements.right, {
  //   backgroundColor: bg.right,
  // });

  // gsap.to(elements.content, {
  //   backgroundColor: bg.content,
  // });
// }

// Querying
// TODO: fix it
export function query(arg) {
  let window = arg;

  if (typeof window === "string") {
    window = document.getElementById(id);
  }

  console.log(data[window.id]);
  return data[window.id];
}
