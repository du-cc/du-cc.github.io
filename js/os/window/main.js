// Module: Window management (main)
// TODO:
// - Implement with other modules (idk)
// - Add more features???????(idk)<-- Auto-generated by TODO-GeneratorTM (copilot)

import * as layer from "./layer.js";
import * as drag from "./drag.js";

// Function: Create window
// Arguments:
//   Name    |  Type       |  Description         |  Example
// --------------------------------------------------------------------------------------------
// - type    |  [string]   |  Window type         |  [window, dialog]
// - icon    |  [HTML]     |  Window icon         |  [<img>, <i>]
// - title   |  [string]   |  Window title        |  [string]
// - content |  [dict]     |  Window content      |  {type: [HTML/URL], content: [HTML/URL]}
// - args    |  [dict]     |  Optional arguments  |  Below:
// --------------------------------------------------------------------------------------------

// Optional arguments:
// x: [string],            | x pos
// y: [string],            | y pos
// TODO: sx: [string],           | x size
// TODO: sy: [string],           | y size
// draggable: [bool],      | draggable?
// pinToTop: [bool],       | overlay the window on top
// TODO: ignoreDefault: [bool],  | ignore default topbar (no topbar if true, remember to attach topbar in content)
// actions: [dict]         | actions [close, minimize, (custom)]

// Settings:
const actionIcons = {
  close: '<i class="fa-regular fa-xmark fa-fw"></i>',
  minimize: '<i class="fa-regular fa-minus fa-fw"></i>',
};

// TODO:
// - Implement id with app id or window id
// - Add custom actions
// - Ignore default topbar

function createWindow(type, icon, title, content, args) {
  // Parse arguments (default values)
  if (!args["x"]) args["x"] = "center";
  if (!args["y"]) args["y"] = "center";
  if (args["draggable"] === undefined) args["draggable"] = true;
  //   if (!args["ignoreDefault"]) args["ignoreDefault"] = false;
  if (!args["actions"]) args["actions"] = { close: true, minimize: true };

  // Create window
  const window = document.createElement("div");
  window.classList.add("os_window");
  window.setAttributeNS(null, "elementType", type);
  if (!args["draggable"]) window.setAttribute("undraggable", "");
  window.setAttribute(
    "id",
    `os_window_${Math.random().toString(36).substring(7)}`
  );

  // Top bar creation
  if (type === "window") {
    console.log("topbar");
    // Top bar (parent)
    const top = document.createElement("div");
    top.classList.add("top");
    window.appendChild(top);

    // Top bar (Left)
    const left = document.createElement("div");
    left.classList.add("left");
    left.innerHTML = `${icon}<span>${title}</span>`;
    if (!args["actions"] || args["actions"].length === 0) {
      left.style.borderRadius = "10px 10px 0 0";
    }
    top.appendChild(left);

    // Top bar (Right)
    const right = document.createElement("div");
    right.classList.add("right");
    top.appendChild(right);

    // Actions (Right)

    // sorry if unefficient, i need these to be in order
    if (args["actions"].includes("minimize")) {
      const minimize = document.createElement("div");
      minimize.classList.add("action");
      minimize.classList.add("minimize");
      minimize.innerHTML = actionIcons["minimize"];
      right.appendChild(minimize);
    }

    if (args["actions"].includes("close")) {
      const close = document.createElement("div");
      close.classList.add("action");
      close.classList.add("close");
      close.innerHTML = actionIcons["close"];
      right.appendChild(close);
    }
  }

  // Content
  const contentDiv = document.createElement("div");
  contentDiv.classList.add("content");
  if (args["ignoreDefault"] === true || type === "dialog")
    contentDiv.style.borderRadius = "10px";
  window.appendChild(contentDiv);

  // Content (URL)
  if (content["type"] === "url") {
    const iframe = document.createElement("iframe");
    iframe.src = content["content"];
    iframe.setAttribute("frameborder", "0");
    contentDiv.appendChild(iframe);
  }

  // Content (HTML)
  if (content["type"] === "html") {
    contentDiv.innerHTML = content["content"];
  }

  // Additional arguments

  // Position
  if (args["x"] === "center") {
    gsap.set(window, { x: "-50%", left: "50%" });
  } else {
    gsap.set(window, { x: args["x"] });
  }

  if (args["y"] === "center") {
    gsap.set(window, { y: "-50%", top: "50%" });
  } else {
    gsap.set(window, { y: args["y"] });
  }

  // Size
  if (args["sx"]) {
    window.style.maxWidth = args["sx"];
  }
  if (args["sy"]) {
    window.style.maxHeight = args["sy"];
  }

  // Pin to top
  if (args["pinToTop"]) {
    layer.pinToTop(window);
  }

  // Append window to body
  document.getElementById("body").appendChild(window);

  // Draggable
  console.log(args["draggable"], type);
  if (args["draggable"] === true && type === "window") {
    console.log("draggable", window);
    drag.setDraggable(window);
  }

  // Event listeners
  if (type === "window") {
    args["actions"].forEach((action) => {
      window.querySelector(`.${action}`).addEventListener("click", () => {
        if (action === "close") {
          closeWindow(window);
        }
        if (action === "minimize") {
          minimizeWindow(window);
        }
      });
    });
  }

  return window;
}

// TODO:
// - Add animations

export function closeWindow(window) {
  window.remove();
}

// TODO:
// - Add animations
// - Integrate with taskbar module

export function minimizeWindow(window) {
  console.log("Minimize window");
}

export function restoreWindow(window) {
  console.log("Restore window");
}

// Querying
export function checkWindowPropertiesByElement(window) {
  var data = {
    element: window,
    id: window.id,
    type: window.getAttribute("elementType"),
    x: window.style.left,
    y: window.style.top,
    sx: window.style.maxWidth,
    sy: window.style.maxHeight,
    draggable: !window.hasAttribute("undraggable"),
    headless: !window.querySelector(".top"),
  };

  if (data.headless === false) {
    data.title = window.querySelector(".left span").innerText;
    data.icon = window.querySelector(".left i").outerHTML;
    data.actions = window.querySelector(".right").children;
  }

  return data;
}

export function checkWindowPropertiesById(id) {
  return checkWindowPropertiesByElement(document.getElementById(id));
}

console.log("Window management module loaded");

createWindow(
  "window",
  "<i class='fa-regular fa-window fa-fw'></i>",
  "Dialog",
  {
    type: "html",
    content: `<div id="btn" style="display: flex; flex-direction: column; gap: 0.3em"></div>
        `,
  },
  {
    x: "center",
    y: "center",
    draggable: true,
    ignoreDefault: false,
    pinToTop: true,
    actions: [],
  }
);

// Test it out function
// TODO:
// - Remove this function when production
function what() {
  const we = document.getElementById("btn");
  const btn = document.createElement("button");
  btn.innerHTML = `
    Button spawner!!!!
    `;
  btn.style.padding = "15px";
  btn.style.border = "none";
  btn.style.backgroundColor = "#c3d2e8";
  btn.style.color = "#000";
  btn.style.borderRadius = "10px";
  btn.style.cursor = "pointer";
  btn.style.fontFamily = "inherit";
  btn.style.marginTop = "10px";

  const titleI = document.createElement("input");
  titleI.placeholder = "Title";
  titleI.style.padding = "15px";
  titleI.style.border = "none";
  titleI.style.borderBottom = "1px solid #000";
  titleI.style.color = "#000";
  titleI.style.borderRadius = "10px";
  titleI.style.fontFamily = "inherit";
  titleI.style.marginBottom = "20px";

  const contentL = document.createElement("label");
  contentL.innerHTML = "Window content";

  const contenttypeI = document.createElement("input");
  contenttypeI.placeholder = "Content (url/html)";
  contenttypeI.style.padding = "15px";
  contenttypeI.style.border = "none";
  contenttypeI.style.borderBottom = "1px solid #000";
  contenttypeI.style.color = "#000";
  contenttypeI.style.borderRadius = "10px";
  contenttypeI.style.fontFamily = "inherit";

  const contentI = document.createElement("textarea");
  contentI.placeholder = "Content (html)";
  contentI.style.padding = "15px";
  contentI.style.border = "none";
  contentI.style.borderBottom = "1px solid #000";
  contentI.style.color = "#000";
  contentI.style.borderRadius = "10px";
  contentI.style.fontFamily = "inherit";

  const typeI = document.createElement("input");
  typeI.placeholder = "Type (window/dialog)";
  typeI.style.padding = "15px";
  typeI.style.border = "none";
  typeI.style.borderBottom = "1px solid #000";
  typeI.style.color = "#000";
  typeI.style.borderRadius = "10px";
  typeI.style.fontFamily = "inherit";

  const miscL = document.createElement("label");
  miscL.innerHTML = "Miscellaneous";

  const xI = document.createElement("input");
  xI.placeholder = "X position ''=random/center";
  xI.style.padding = "15px";
  xI.style.border = "none";
  xI.style.borderBottom = "1px solid #000";
  xI.style.color = "#000";
  xI.style.borderRadius = "10px";
  xI.style.fontFamily = "inherit";

  const yI = document.createElement("input");
  yI.placeholder = "Y position ''=random/center";
  yI.style.padding = "15px";
  yI.style.border = "none";
  yI.style.borderBottom = "1px solid #000";
  yI.style.color = "#000";
  yI.style.borderRadius = "10px";
  yI.style.fontFamily = "inherit";

  const dragI = document.createElement("input");
  dragI.placeholder = "Draggable (true/false)";
  dragI.style.padding = "15px";
  dragI.style.border = "none";
  dragI.style.borderBottom = "1px solid #000";
  dragI.style.color = "#000";
  dragI.style.borderRadius = "10px";
  dragI.style.fontFamily = "inherit";

  const pinI = document.createElement("input");
  pinI.placeholder = "Pin to top (true/false)";
  pinI.style.padding = "15px";
  pinI.style.border = "none";
  pinI.style.borderBottom = "1px solid #000";
  pinI.style.color = "#000";
  pinI.style.borderRadius = "10px";
  pinI.style.fontFamily = "inherit";

  const actionL = document.createElement("label");
  actionL.innerHTML = "Actions: 1. close, 2. minimize";

  const closeCheck = document.createElement("input");
  closeCheck.type = "checkbox";
  closeCheck.value = "close";
  closeCheck.checked = true;

  const minimizeCheck = document.createElement("input");
  minimizeCheck.type = "checkbox";
  minimizeCheck.value = "minimize";
  minimizeCheck.checked = true;

  we.appendChild(typeI);
  we.appendChild(titleI);
  we.appendChild(contentL);
  we.appendChild(contenttypeI);
  we.appendChild(contentI);
  we.appendChild(miscL);
  we.appendChild(xI);
  we.appendChild(yI);
  we.appendChild(dragI);
  we.appendChild(pinI);
  we.appendChild(actionL);
  we.appendChild(closeCheck);
  we.appendChild(minimizeCheck);

  we.appendChild(btn);

  function gi(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  function c() {
    const type = typeI.value;
    const title = titleI.value;
    const content = contentI.value;
    const contenttype = contenttypeI.value;
    var draggablef = dragI.value;
    var pinToTop = pinI.value;

    var xv = 0;
    var yv = 0;

    if (xI.value === "center") {
      xv = "center";
    } else if (xI.value === "") {
      xv = gi(0, 1000);
    } else {
      xv = xI.value;
    }

    if (yI.value === "center") {
      yv = "center";
    } else if (yI.value === "") {
      yv = gi(0, 1000);
    } else {
      yv = yI.value;
    }

    var a = [];

    if (closeCheck.checked === true) {
      a.push("close");
    }

    if (minimizeCheck.checked === true) {
      a.push("minimize");
    }

    if (draggablef === "true") {
      draggablef = true;
    }

    if (pinToTop === "true") {
        pinToTop = true;
        }

    createWindow(
      type,
      "<i class='fa-regular fa-window fa-fw'></i>",
      title,
      { type: contenttype, content: content },
      {
        x: xv,
        y: yv,
        draggable: draggablef,
        pinToTop: pinToTop,
        actions: a,
      }
    );
  }

  btn.addEventListener("click", () => {
    c();
  });

  btn.addEventListener("mousedown", () => {
    gsap.to(btn, {
      opacity: 0.8,
      scale: 1.1,
      duration: 0.3,
    });
  });

  btn.addEventListener("mouseup", () => {
    gsap.to(btn, {
      opacity: 1,
      scale: 1,
      duration: 0.3,
    });
  });
}

what();
