// Module: Window management (main)
// TODO:
// - Implement with other modules (idk)
// - Add more features???????(idk)<-- Auto-generated by TODO-GeneratorTM (copilot)

import * as layer from "./layer.js";
import * as drag from "./drag.js";

// Function: Create window
// Arguments:
//   Name    |  Type       |  Description         |  Example
// --------------------------------------------------------------------------------------------
// - type    |  [string]   |  Window type         |  [window, dialog]
// - icon    |  [HTML]     |  Window icon         |  [<img>, <i>]
// - title   |  [string]   |  Window title        |  [string]
// - content |  [dict]     |  Window content      |  {type: [HTML/URL], content: [HTML/URL]}
// - args    |  [dict]     |  Optional arguments  |  Below:
// --------------------------------------------------------------------------------------------

// Optional arguments:
// x: [string],            | x pos
// y: [string],            | y pos
// TODO: sx: [string],           | x size
// TODO: sy: [string],           | y size
// draggable: [bool],      | draggable?
// pinToTop: [bool],       | overlay the window on top
// TODO: ignoreDefault: [bool],  | ignore default topbar (no topbar if true, remember to attach topbar in content)
// actions: [dict]         | actions [close, minimize, (custom)]

// Settings:
const actionIcons = {
  close: '<i class="fa-regular fa-xmark fa-fw"></i>',
  minimize: '<i class="fa-regular fa-minus fa-fw"></i>',
};

// TODO:
// - Implement id with app id or window id
// - Add custom actions
// - Ignore default topbar

export function createWindow(type, icon, title, content, args) {
  console.log(args)
  const acceptedValues = {
    type: ["window", "dialog"],
    content: ["html", "url"],
  };

  // Parse arguments 
  // (default values)
  if (!args["x"]) args["x"] = "center";
  if (!args["y"]) args["y"] = "center";
  if (args["draggable"] === undefined) args["draggable"] = true;
  //   if (!args["ignoreDefault"]) args["ignoreDefault"] = false;
  if (!args["actions"]) args["actions"] = { close: true, minimize: true };

  // Argument fallbacks
  if (!acceptedValues["type"].includes(type)) {
    console.error("Invalid window type");
    return { ok: false, error: "Invalid window type" };
  }

  if (!acceptedValues["content"].includes(content["type"])) {
    console.error("Invalid content type");
    return { ok: false, error: "Invalid content type" };
  }

  // Create window
  const window = document.createElement("div");
  window.classList.add("os_window");
  window.setAttributeNS(null, "elementType", type);
  if (!args["draggable"]) window.setAttribute("undraggable", "");
  window.setAttribute(
    "id",
    `os_window_${Math.random().toString(36).substring(7)}`
  );

  // Top bar creation
  if (type === "window") {
    // Top bar (parent)
    const top = document.createElement("div");
    top.classList.add("top");
    window.appendChild(top);

    // Top bar (Left)
    const left = document.createElement("div");
    left.classList.add("left");
    left.innerHTML = `${icon}<span>${title}</span>`;
    if (!args["actions"] || args["actions"].length === 0) {
      left.style.borderRadius = "10px 10px 0 0";
    }
    top.appendChild(left);

    // Top bar (Right)
    const right = document.createElement("div");
    right.classList.add("right");
    top.appendChild(right);

    // Actions (Right)

    // sorry if unefficient, i need these to be in order
    if (args["actions"].includes("minimize")) {
      const minimize = document.createElement("div");
      minimize.classList.add("action");
      minimize.classList.add("minimize");
      minimize.innerHTML = actionIcons["minimize"];
      right.appendChild(minimize);
    }

    if (args["actions"].includes("close")) {
      const close = document.createElement("div");
      close.classList.add("action");
      close.classList.add("close");
      close.innerHTML = actionIcons["close"];
      right.appendChild(close);
    }
  }

  // Content
  const contentDiv = document.createElement("div");
  contentDiv.classList.add("content");
  if (args["ignoreDefault"] === true || type === "dialog")
    contentDiv.style.borderRadius = "10px";
  window.appendChild(contentDiv);

  // Content (URL)
  if (content["type"] === "url") {
    const iframe = document.createElement("iframe");
    iframe.src = content["content"];
    iframe.setAttribute("frameborder", "0");
    iframe.setAttribute("x-frame-options", "cross-origin");
    contentDiv.appendChild(iframe);
  }
  // Content (HTML)
  if (content["type"] === "html") {
    contentDiv.innerHTML = content["content"];
  }

  // Additional arguments

  // Position
  if (args["x"] === "center") {
    gsap.set(window, { x: "-50%", left: "50%" });
  } else {
    gsap.set(window, { x: args["x"] });
  }

  if (args["y"] === "center") {
    gsap.set(window, { y: "-50%", top: "50%" });
  } else {
    gsap.set(window, { y: args["y"] });
  }

  // Size
  if (args["sx"]) {
    contentDiv.style.width = parseInt(args["sx"]) + "px";
  }
  if (args["sy"]) {
    contentDiv.style.height = parseInt(args["sy"]) + "px";
  }

  // Pin to top
  if (args["pinToTop"]) {
    layer.pinToTop(window);
  }

  // Append window to body
  document.getElementById("body").appendChild(window);

  // Draggable
  if (args["draggable"] === true && type === "window") {
    drag.setDraggable(window);
  }

  // Event listeners
  if (type === "window") {
    args["actions"].forEach((action) => {
      window.querySelector(`.${action}`).addEventListener("click", () => {
        if (action === "close") {
          closeWindow(window);
        }
        if (action === "minimize") {
          minimizeWindow(window);
        }
      });
    });
  }

  return window;
}

// TODO:
// - Add animations

export function closeWindow(window) {
gsap.to(window, {
    scale: 0.95,
    opacity: 0,
    y: "+=10",
    duration: 0.1,
    onComplete: () => {
      window.remove();
    },
  });
  // window.remove();
}

// TODO:
// - Add animations
// - Integrate with taskbar module

export function minimizeWindow(window) {
  console.log("Minimize window");
}

export function restoreWindow(window) {
  console.log("Restore window");
}

// Querying
export function checkWindowPropertiesByElement(window) {
  var data = {
    element: window,
    id: window.id,
    type: window.getAttribute("elementType"),
    x: window.style.left,
    y: window.style.top,
    sx: window.style.maxWidth,
    sy: window.style.maxHeight,
    draggable: !window.hasAttribute("undraggable"),
    headless: !window.querySelector(".top"),
  };

  if (data.headless === false) {
    data.title = window.querySelector(".left span").innerText;
    data.icon = window.querySelector(".left i").outerHTML;
    data.actions = window.querySelector(".right").children;
  }

  return data;
}

export function checkWindowPropertiesById(id) {
  return checkWindowPropertiesByElement(document.getElementById(id));
}